import pytest
import torch
from torch.autograd import grad

from adv_lib.distances.color_difference import ciede2000_color_difference

# test data from http://www2.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf
TEST_DATA = [
    # L*1     a*1       b*1       L*2      a*2       b*2       ΔE_00
    [50.0000, 2.677200, -79.7751, 50.0000, 0.000000, -82.7485, 2.0425],
    [50.0000, 3.157100, -77.2803, 50.0000, 0.000000, -82.7485, 2.8615],
    [50.0000, 2.836100, -74.0200, 50.0000, 0.000000, -82.7485, 3.4412],
    [50.0000, -1.38020, -84.2814, 50.0000, 0.000000, -82.7485, 1.0000],
    [50.0000, -1.18480, -84.8006, 50.0000, 0.000000, -82.7485, 1.0000],
    [50.0000, -0.90090, -85.5211, 50.0000, 0.000000, -82.7485, 1.0000],
    [50.0000, 0.000000, 0.000000, 50.0000, -1.00000, 2.000000, 2.3669],
    [50.0000, -1.00000, 2.000000, 50.0000, 0.000000, 0.000000, 2.3669],
    [50.0000, 2.490000, -0.00100, 50.0000, -2.49000, 0.000900, 7.1792],
    [50.0000, 2.490000, -0.00100, 50.0000, -2.49000, 0.001000, 7.1792],
    [50.0000, 2.490000, -0.00100, 50.0000, -2.49000, 0.001100, 7.2195],
    [50.0000, 2.490000, -0.00100, 50.0000, -2.49000, 0.001200, 7.2195],
    [50.0000, -0.00100, 2.490000, 50.0000, 0.000900, -2.49000, 4.8045],
    [50.0000, -0.00100, 2.490000, 50.0000, 0.001000, -2.49000, 4.8045],
    [50.0000, -0.00100, 2.490000, 50.0000, 0.001100, -2.49000, 4.7461],
    [50.0000, 2.500000, 0.000000, 50.0000, 0.000000, -2.50000, 4.3065],
    [50.0000, 2.500000, 0.000000, 73.0000, 25.00000, -18.0000, 27.1492],
    [50.0000, 2.500000, 0.000000, 61.0000, -5.00000, 29.00000, 22.8977],
    [50.0000, 2.500000, 0.000000, 56.0000, -27.0000, -3.00000, 31.9030],
    [50.0000, 2.500000, 0.000000, 58.0000, 24.00000, 15.00000, 19.4535],
    [50.0000, 2.500000, 0.000000, 50.0000, 3.173600, 0.585400, 1.0000],
    [50.0000, 2.500000, 0.000000, 50.0000, 3.297200, 0.000000, 1.0000],
    [50.0000, 2.500000, 0.000000, 50.0000, 1.863400, 0.575700, 1.0000],
    [50.0000, 2.500000, 0.000000, 50.0000, 3.259200, 0.335000, 1.0000],
    [60.2574, -34.0099, 36.26770, 60.4626, -34.1751, 39.43870, 1.2644],
    [63.0109, -31.0961, -5.86630, 62.8187, -29.7946, -4.08640, 1.2630],
    [61.2901, 3.719600, -5.39010, 61.4292, 2.248000, -4.96200, 1.8731],
    [35.0831, -44.1164, 3.793300, 35.0232, -40.0716, 1.590100, 1.8645],
    [22.7233, 20.09040, -46.6940, 23.0331, 14.97300, -42.5619, 2.0373],
    [36.4612, 47.85800, 18.38520, 36.2715, 50.50650, 21.22310, 1.4146],
    [90.8027, -2.08310, 1.441000, 91.1528, -1.64350, 0.044700, 1.4441],
    [90.9257, -0.54060, -0.92080, 88.6381, -0.89850, -0.72390, 1.5381],
    [6.77470, -0.29080, -2.42470, 5.87140, -0.09850, -2.22860, 0.6377],
    [2.07760, 0.079500, -1.13500, 0.90330, -0.06360, -0.55140, 0.9082],
]


@pytest.mark.parametrize('dtype', [torch.float32, torch.float64])
def test_ciede2000_color_difference_value(dtype: torch.dtype) -> None:
    test_data = torch.tensor(TEST_DATA, dtype=dtype)
    Lab1 = test_data.narrow(1, 0, 3).clone()
    Lab2 = test_data.narrow(1, 3, 3).clone()
    test_ΔE_00 = test_data[:, -1].clone()

    ΔE_00_1 = ciede2000_color_difference(Lab1, Lab2)
    ΔE_00_2 = ciede2000_color_difference(Lab2, Lab1)
    ΔE_00_0 = ciede2000_color_difference(Lab1, Lab1)

    assert torch.equal(ΔE_00_0, torch.zeros_like(ΔE_00_0))  # check identical inputs
    assert torch.equal(ΔE_00_1, ΔE_00_2)  # check symmetry
    assert torch.allclose(ΔE_00_1, test_ΔE_00, rtol=1e-4, atol=1e-5)  # check correctness


@pytest.mark.parametrize('dtype', [torch.float32, torch.float64])
def test_ciede2000_color_difference_grad(dtype: torch.dtype) -> None:
    test_data = torch.tensor(TEST_DATA, dtype=dtype)
    Lab1 = test_data.narrow(1, 0, 3).clone()
    Lab2 = test_data.narrow(1, 3, 3).clone()

    # check that gradients are not NaN
    Lab1.requires_grad_(True)

    # check for identical inputs
    ΔE_00 = ciede2000_color_difference(Lab1, Lab1, ε=1e-12)
    ΔE_00_grad = grad(ΔE_00.sum(), Lab1, only_inputs=True)[0]
    assert not torch.isnan(ΔE_00_grad).any()
    assert torch.equal(ΔE_00_grad, torch.zeros_like(ΔE_00_grad))

    # check for different inputs
    ΔE_00 = ciede2000_color_difference(Lab1, Lab2, ε=1e-12)
    ΔE_00_grad = grad(ΔE_00.sum(), Lab1, only_inputs=True)[0]
    assert not torch.isnan(ΔE_00_grad).any()
